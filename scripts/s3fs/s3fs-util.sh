#!/usr/bin/env bash

set -e
set -u
#set -x

[ "${S3FS_UTIL_FLAG:-0}" -gt 0 ] && return 0

export S3FS_UTIL_FLAG=1

s3fs_util_script_path=$(readlink -e "${BASH_SOURCE[0]}")
s3fs_util_script_dir="${s3fs_util_script_path%/*}"

source "${s3fs_util_script_dir}/../util/util.sh"



function s3fs_build() {

    if [ -f "/usr/local/bin/s3fs" ]; then
        [ ! -L "/usr/bin/s3fs" ] && sudo ln -s /usr/local/bin/s3fs /usr/bin/s3fs
        return 0
    fi

    sudo yum -y install automake fuse fuse-devel gcc-c++ git libcurl-devel libxml2-devel make openssl-devel

    if [ ! -f autogen.sh ]; then
        git clone https://github.com/s3fs-fuse/s3fs-fuse.git
        try pushd s3fs-fuse
    else
        debugLog "INFO: s3fs found"
    fi

    ./autogen.sh
    ./configure
    make
    sudo make install

    sudo ln -s /usr/local/bin/s3fs /usr/bin/s3fs

    try popd
}


function s3fs_config() {

    [ "${#}" -ne 2 ] && errorMessage "access key and secret key arguments are required\nusage: s3fs_config <access_key> <secret_key>" && return 1

    local access_key="${1:-}"
    local secret_key="${2:-}"

    [ -z "${access_key}" ] || [ -z "${secret_key}" ] && errorMessage "access key and secret key must not be blank: s3fs_config <access_key> <secret_key>" && return 1

    local credentials_file=~/.passwd-s3fs
    sudo sed -i "s/# user_allow_other/user_allow_other/g" /etc/fuse.conf

    if [ -n "${access_key}" ] && [ -n "${secret_key}" ]; then
        echo "${access_key}:${secret_key}" > "${credentials_file}"
        chmod 600 "${credentials_file}"
    elif [ ! -f "${credentials_file}" ]; then
        errorMessage "Credential file ${credentials_file} must be set."
        return 1
    else
        # credentials_file will be generated by cloud formation
        debugLog "Credential file ${credentials_file} found."
    fi

}


function s3fs_mount() {

    [ "${#}" -lt 1 ] && errorMessage "s3 bucket argument is required\nusage: s3fs_mount <s3_bucket> [ <s3_path> [ <s3_mount_dir> [ <s3_mount_root> [  <s3fs_umask> ] ] ] ]" && return 1

    local s3_bucket="${1:-}"
    local s3_path="${2:-/}"
    local s3_mount_dir="${3:-${s3_mount_dir:-${TALEND_FACTORY_REPO_MOUNT_DIR:-/opt/repo}}}"
    local s3_mount_root="${4:-${s3_mount_dir}}"
    local s3fs_umask="${5:-037}"

set -x
    sudo mkdir -p "${s3_mount_dir}"

#   sudo chown -R "${USER}:${USER}" "${s3_mount_root}"
    sudo chown -R "ec2-user:ec2-user" "${s3_mount_root}"

    [ -n "${s3_path}" ] && [ "${s3_path:0:1}" != "/" ] && s3_path="/${s3_path}"
    [ -n "${s3_path}" ] && s3_path=":${s3_path}"

    try s3fs "${s3_bucket}${s3_path}" "${s3_mount_dir}" -o allow_other -o mp_umask="${s3fs_umask}"
}


function s3fs_file_attrib() {

    [ "${#}" -lt 1 ] && errorMessage "filepath is required\nusage: s3fs_chmod <filepath> [ <permission> [ <owner> ] ]" && return 1

    local filepath="${1:-}"
    local perm="${2:-640}"
    local owner="${3:-ec2-user}"

    debugLog "s3fs-chmod: ${filepath} ${owner}:${owner} ${perm}"

    sudo chown "${owner}:${owner}" "${filepath}"
    chmod "${perm}" "${filepath}"
}


# must be executed as sudo

function s3fs_dir_attrib() {

    local target_owner="${1:-ec2-user}"
    local mount_dir="${2:-/opt/repo}"

    local mydir_list
    mydir_list=$(ls -d "${mount_dir}"/*/)
    for subdir in ${mydir_list}
    do
        echo "processing ${subdir}"
        chown "${target_owner}:${target_owner}" "${subdir}"
        chmod 750 "${subdir}"
        find "${subdir}" -type d -exec chown "${target_owner}:${target_owner}" {} \;
        find "${subdir}" -type d -exec chmod 750 {} \;
        find "${subdir}" -type f -name "*" -exec chown "${target_owner}:${target_owner}" {} \;
        find "${subdir}" -type f -name "*" -exec chmod 440 {} \;
        find "${subdir}" -type f -name "*.sh" -exec chmod 550 {} \;
    done

    chmod u+x "${mount_dir}/scripts/0.0.9/ec2-metadata"
    chmod g+x "${mount_dir}/scripts/0.0.9/ec2-metadata"
}
