//!!!!!
// This property file lists the different options for each Talend component.
// The options are grouped by components and categories.
// For some components, the category/section 'dependencies' represents the list of dependencies
// to pre install before the component itself
//
// IMPORTANT: On Windows platform any file system path should conforms to java notation
// The '\' should be escaped with '\'
//  path = "c:\mydir\myfile"    --> wrong
//  path = "c:\\mydir\\myfile"  --> right
//  path = "c:/mydir/myfile"    --> better: Platform independent
//
// A property can reference another property only if it has been defined before being used
// Ex:
//  root= "c:/mydir/"
//  dirs {
//      path1 = root + "/myfile"         --> right
//      path2 = "$root/myfile"           --> "groovyER" ;-)
//      path3 = "$root/myfile-$version"  --> wrong. version defined after path3 (see below)
//  }
//  conf.path = "$dirs.path3/conf"       --> Property reference must be qualified based on the definition scope.
//  version = '1.0'
//

amc {
  dependencies = []

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = ENV['TALEND_AMC_TOMCAT_MANAGER_USER'] ?: "admin"
      password = ENV['TALEND_AMC_TOMCAT_MANAGER_PASSWORD'] ?: "admin"
    }

    instance {
      name = ENV['TALEND_AMC_NAME'] ?: "amc"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.monitoring?.host}"
      port = ENV['TALEND_AMC_PORT'] ?: 8085
      port_ajp = 8409


      webapp {
        name = ENV['TALEND_AMC_WEBAPP_NAME'] ?: "amc"
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      service {
        name = "talend-${instance.name}-6.3.1"
        display = "Talend Activity Monitoring Console 6.3.1"
        description = "Talend Activity Monitoring Console is an add-on tool integrated in the studio and in Talend Administration Center for monitoring Talend Jobs and projects."

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8444
        // Info: If enforce is true, all http requests will be redirected to the ssl port automatically
        enforce = true

        keystore {
          // Default value: instance host
          alias = "${AMC.app_server.instance.host}"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${AMC.app_server.instance.name}/conf/${AMC.app_server.instance.name}_sslkeystore"

          // keystore password
          store.password = "jks_pwd"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Distinguish name: Update accordingly
          dname = "CN=${AMC.app_server.instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"
        }
      }
    }
  }

  database {
    create.schema = false

    // Databases supported out of the box : "mariadb", "mysql",  "oracle" and "sqlserver"
    // Value is read from the host.conf file from the 'monitoring' section. If not available default to 'mysql'
    // !! Recommended!! Change the value in hosts.conf instead than here.
    type = "${(HOSTS.monitoring?.database.type) ?: 'mysql'}"

    mariadb {
      dependencies = [
          "database.driver.mariadb"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.monitoring?.database.schema_service) ?: ENV['TALEND_AMC_DB_SCHEMA'] ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: ENV['TALEND_AMC_DB_HOST'] ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: ENV['TALEND_AMC_DB_PORT'] ?: 3306
      username = "${(HOSTS.monitoring?.database.user) ?: ENV['TALEND_AMC_DB_USER'] ?: 'admin'}"

      // Default password: 'admin'
      password = "${(HOSTS.monitoring?.database.password) ?: ENV['TALEND_AMC_DB_PASSWORD'] ?: 'admin'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:mariadb://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "org.mariadb.jdbc.Driver"
    }

    mysql {
      dependencies = [
          "database.driver.mysql"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.monitoring?.database.schema_service) ?: ENV['TALEND_AMC_DB_SCHEMA'] ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: ENV['TALEND_AMC_DB_HOST'] ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: ENV['TALEND_AMC_DB_PORT'] ?: 3306
      username = "${(HOSTS.monitoring?.database.user) ?: ENV['TALEND_AMC_DB_USER'] ?: 'admin'}"

      // Default password: 'admin'
      password = "${(HOSTS.monitoring?.database.password) ?: ENV['TALEND_AMC_DB_PASSWORD'] ?: 'admin'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
      url = "jdbc:mysql://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"

      driver = "com.mysql.jdbc.Driver"
    }

    oracle {
      //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
      dependencies = [
          "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
//          "database.driver.Oracle"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      service_name = "${(HOSTS.monitoring?.database.schema_service) ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: 1521
      username = "${(HOSTS.monitoring?.database.user) ?: 'SYSTEM'}"
      // Default password: 'MANAGER'
      password = "${(HOSTS.monitoring?.database.password) ?: 'MANAGER'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:oracle:thin:@$host:$port:$service_name"
      // Long format
      // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"

      driver = "oracle.jdbc.driver.OracleDriver"
    }

    sqlserver {
      dependencies = [
          "database.driver.sqlserver"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.monitoring?.database.schema_service) ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: 1433
      username = "${(HOSTS.monitoring?.database.user) ?: 'sa'}"
      // Default password: 'sa'
      password = "${(HOSTS.monitoring?.database.password) ?: 'sa'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

//      url = "jdbc:jtds:sqlserver://$host:$port/$schema"
      url = "jdbc:jtds:sqlserver://${host}:${port}/${schema};loginTimeout=${connect_timeout}"

      driver = "net.sourceforge.jtds.jdbc.Driver"
    }
  }
}

cmdline {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.build?.host}"
  port = 8002

  folders {
    home = "$INSTALL_TALEND_FOLDER/cmdline"
    generation = "$INSTALL_DATA_FOLDER/cmdline/exports"
    component = "$INSTALL_DATA_FOLDER/cmdline/components"
    workspaces = "$INSTALL_DATA_FOLDER/cmdline/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/cmdline/studio/configuration"
  }

  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"

  service {
    name = "talend-cmdline-6.3.1"
    display = "Talend CommandLine 6.3.1"
    description = "Talend CommandLine 6.3.1"

    config = HOSTS.services
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/cmdline/logging"
      path = "$folder/cmdline.log"
    }

    logstach {
      host = "${HOSTS.logging?.host}"
      // port = 8056
      port = ENV["TALEND_LOGSTASH_CMDLINE_PORT"] ?: 8056
    }
  }

}

// Secondary CommandLine
cmdline_s {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.build?.host}"
  port = 8003

  folders {
    home = "$INSTALL_TALEND_FOLDER/cmdline_s"
    generation = "$INSTALL_DATA_FOLDER/cmdline_s/exports"
    component = "$INSTALL_DATA_FOLDER/cmdline_s/components"
    workspaces = "$INSTALL_DATA_FOLDER/cmdline_s/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/cmdline_s/studio/configuration"
  }

  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"

  service {
    name = "talend-secondary-cmdline-6.3.1"
    display = "Talend Secondary CommandLine 6.3.1"
    description = "Talend Secondary CommandLine 6.3.1"

    config = HOSTS.services
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/cmdline-secondary/logging"
      path = "$folder/cmdline.log"
    }

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      // port = 8056
      port = ENV["TALEND_LOGSTASH_CMDLINE_PORT"] ?: 8056
    }
  }

}

// CommandLine dedicated to Continuous Integration
cmdline_ci {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.ci?.host}"
  port = 8002

  folders {
    home = "$INSTALL_TALEND_FOLDER/cmdline_ci"
    generation = "$INSTALL_DATA_FOLDER/cmdline_ci/exports"
    component = "$INSTALL_DATA_FOLDER/cmdline_ci/components"
    workspaces = "$INSTALL_DATA_FOLDER/cmdline_ci/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/cmdline_ci/studio/configuration"
  }

  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"

  service {
    name = "talend-ci-cmdline-6.3.1"
    display = "Talend CommandLine 6.3.1 - CI"
    description = "Talend Commandline 6.3.1 dedicated to Continuous Integration "

    // Overwrite default behaviour. Don't start cmdline as a service by default
    // as it's used, usually, with 'local-generate' Maven goal.
    config {
      // !!Recommended: Uses by default the owner of the installation folders
      // Linux Only
      user = "${HOSTS.services.user}"

      // !!Recommended: Uses by default the owner group of the installation folders
      // Linux Only
      group = "${HOSTS.services.password}"

      // !!Recommended: By default, install all services
      install = true
      // !!Recommended: By default, start all services after the installation
      start = false
    }
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/cmdline_ci/logging"
      path = "$folder/cmdline.log"
    }

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      // port = 8056
      port = ENV["TALEND_LOGSTASH_CMDLINE_PORT"] ?: 8056
    }
  }
}

studio {
  folders {
    home = "$INSTALL_TALEND_FOLDER/studio"
    workspaces = "$INSTALL_DATA_FOLDER/studio/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/studio/studio/configuration"
  }
  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"
}

nexus {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = ENV["TALEND_NEXUS_HOST"] ?: ""
  port = ENV["TALEND_NEXUS_PORT"] ?: 8081

  url = "http://$host:$port/nexus"

  username = "admin"
  password = "Talend123"

  releases = "releases"
  snapshots = "snapshots"
  group = "org.example"

  folders {
    home = "$INSTALL_TALEND_FOLDER/nexus"
    sonatype_work = "$INSTALL_DATA_FOLDER/nexus/sonatype-work"
    logs = "$INSTALL_DATA_FOLDER/nexus/logs"
    tmp = "$INSTALL_DATA_FOLDER/nexus/tmp"
  }

  service {
    name = "nexus"
    display = "Sonatype Nexus Artifact Repository"
    description = "Sonatype Nexus Artifact Repository used by Talend"

    config = HOSTS.services
  }
}

tac {
  dependencies = [
      // Optional for windows based install
      //"database.server.MySQL", // Download & Install MySQL Server
      //"database.client.DBeaver",  // Database workbench: Replace MySQL & MariaDB Workbench, ...
  ]

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = ENV["TALEND_TAC_TOMCAT_MANAGER_USER"] ?: "admin"
      password = ENV["TALEND_TAC_TOMCAT_MANAGER_PASSWORD"] ?: "admin"
    }

    instance {
      name = ENV["TALEND_TAC_NAME"] ?: "tac"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.admin?.host}"
      port = ENV['TALEND_TAC_PORT'] ?: 8080
      port_ajp = 8009

      webapp {
        // name = "org.talend.administrator"
        name = ENV['TALEND_TAC_WEBAPP_NAME'] ?: "tac"
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      service {
        name = "talend-${instance.name}-6.3.1"
        display = "Talend Administration Center 6.3.1"
        description = "Web admin interface for Talend server. Enables scheduling and monitoring of Talend jobs. Access the tac console through http://localhost:${tac.app_server.instance.port}/${tac.app_server.instance.webapp.name}"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8443
        // Info: If enforce is true, all http requests will be redirected to the ssl port automatically
        enforce = true

        keystore {
          // Default value: instance host
          alias = "TALEND_TAC"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${tac.app_server.instance.name}/conf/${tac.app_server.instance.name}_sslkeystore"

          // keystore password
          store.password = "jks_pwd"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Distinguish name: Update accordingly
          dname = "CN=TALEND_TAC, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"
        }
      }
    }
  }

  // Database
  database {
    config.password = "admin"

    // Databases supported out of the box : "h2", "mariadb", "mysql",  "oracle" and "sqlserver"
    // Value is read from the host.conf file from the 'admin' section. If not available default to 'mysql'
    // !! Recommended!! Change the value in hosts.conf instead than here.
    type = "${(HOSTS.admin?.database.type) ?: 'mysql'}"

    h2 {
      dependencies = []

      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      username = "${(HOSTS.admin?.database.user) ?: 'tisadmin'}"
      // Default password: 'tisadmin'
      password = "${(HOSTS.admin?.database.password) ?: 'tisadmin'}"

      url = "jdbc:h2:{0}/WEB-INF/database/$schema;AUTO_SERVER=TRUE;MVCC=TRUE;lock_timeout=15000"
      driver = "org.h2.Driver"
    }

    mariadb {
      dependencies = [
          "database.driver.mariadb"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 3306
      username = "${(HOSTS.admin?.database.user) ?: 'admin'}"
      // Default password: 'admin'
      password = "${(HOSTS.admin?.database.password) ?: 'admin'}"

      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:mariadb://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "org.mariadb.jdbc.Driver"
    }

    mysql {
      dependencies = [
          "database.driver.mysql"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.admin?.database.schema_service) ?: ENV['TALEND_TAC_DB_SCHEMA'] ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: ENV['TALEND_TAC_DB_HOST'] ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: ENV['TALEND_TAC_DB_PORT'] ?: 3306
      username = "${(HOSTS.admin?.database.user) ?: ENV['TALEND_TAC_DB_USER'] ?: 'admin'}"
      password = "${(HOSTS.admin?.database.password) ?: ENV['TALEND_TAC_DB_PASSWORD'] ?: 'admin'}"

      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
      url = "jdbc:mysql://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"

      driver = "com.mysql.jdbc.Driver"
    }

    oracle {
      //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
      dependencies = [
          "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
          //"database.driver.Oracle"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      service_name = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 1521
      username = "${(HOSTS.admin?.database.user) ?: 'SYSTEM'}"
      // Default password: 'MANAGER'
      password = "${(HOSTS.admin?.database.password) ?: 'MANAGER'}"

      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:oracle:thin:@$host:$port:$service_name"
      // Long format
      // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"

      driver = "oracle.jdbc.driver.OracleDriver"
    }

    sqlserver {
      dependencies = [
          "database.driver.sqlserver"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 1433
      username = "${(HOSTS.admin?.database.user) ?: 'sa'}"
      // Default password: 'sa'
      password = "${(HOSTS.admin?.database.password) ?: 'sa'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

//      url = "jdbc:jtds:sqlserver://$host:$port/$schema"
      url = "jdbc:jtds:sqlserver://${host}:${port}/${schema};loginTimeout=${connect_timeout}"

      driver = "net.sourceforge.jtds.jdbc.Driver"
    }

    reports_path = "$INSTALL_DATA_FOLDER/$app_server.instance.name/administrator/audit/reports"
  }

  // High Availability
  ha {
    // turned on by default
    enable = true
    cluster {
      name = "MyClusteredScheduler"
      check_interval = 20000
    }
  }

  default_account {
    login = "admin@company.com"
    password = "admin"
    firstname = "admin"
    lastname = "admin"
    type = "DI"
  }

  commandLine {
    primary {
      host = cmdline.host
      port = cmdline.port

      generation.folder = cmdline.folders.generation
      component.folder = cmdline.folders.component
    }
    secondary {
      host = cmdline_s.host
      port = cmdline_s.port

      generation.folder = cmdline_s.folders.generation
      component.folder = cmdline_s.folders.component
    }
  }

  monitoring {
    _amc {
      // !! IMPORTANT: If the 'host' value is blank, the current server hostname or IP address will be used.
      host = amc.app_server.instance.host
      port = amc.app_server.instance.port
      name = amc.app_server.instance.webapp.name
    }

    kibana {
      // !! IMPORTANT: If the 'host' value is blank, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      // port = 5601
      port = ENV["TALEND_LOGSTASH_KIBANA_PORT"] ?: 5601
    }
  }

  repository {
    // Refers to the nexus configuration defined above
    def _NEXUS = nexus
    nexus {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = _NEXUS.host
      port = _NEXUS.port

      url = _NEXUS.url

      username = _NEXUS.username
      password = _NEXUS.password

      releases = _NEXUS.releases
      snapshots = _NEXUS.snapshots
      group = _NEXUS.group
    }
  }

  jobconductor {
    generated.job.folder = "$INSTALL_DATA_FOLDER/$app_server.instance.name/jobconductor/generatedJobs"
    tasks.logs.folder = "$INSTALL_DATA_FOLDER/$app_server.instance.name/jobconductor/executionLogs"
    max.execution.log = "1000"
    max.age.log = "0"
    max.generated.job = "1000"
    max.age.generated.job = "0"
  }

  ldap {
    active = false

    host = ""
    port = 389
    principal.dn.prefix = ""
    admin.password = ""
    login.field = ""
    email.field = ""
    firstname.field = ""
    lastname.field = ""
    svn.login.field = ""
    svn.password.field = ""
    git.login.field = ""
    git.password.field = ""
  }

  logging {
    folder = "$INSTALL_DATA_FOLDER/$app_server.instance.name/administrator/logging/"
    technical.log.threshold = "WARN"
    technical.log.path = "$folder/technical.log"
    business.log.path = "$folder/business.log"

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      // port = 8050
      port = ENV["TALEND_LOGSTASH_TAC_PORT"] ?: 8050
    }
  }

  smtp {
    active = false

    host = "smtp.company.com"
    port = 25
    require.ssl = false
    username = ""
    password = ""
  }

  softwareupdate {
    talend {
      url = "https://talend-update.talend.com/nexus"
      username = ""
      password = ""
    }

    local {
      url = "$tac.repository.nexus.url"

      deployment {
        username = "talend-updates-admin"
        password = "talend-updates-admin"
      }

      reader {
        username = ""
        password = ""
      }

      repository_id = "talend-updates"
    }
  }

  svn {
    host = "localhost"
    port = "80"
    root = "svn"

    repository = "talend"

    url = "http://$host:$port/$root/$repository"
    username = "tisadmin"
    password = "secretpassword"
    commit.log.pattern = "{0}"

    whiteListBranches = true
  }

  git {
    host = ENV["TALEND_GIT_HOST"] ?: "localhost"
    port = ENV["TALEND_GIT_PORT"] ?: 80

    repository = ENV["TALEND_GIT_REPO"] ?: "talend"

    url = "https://$host:$port/$repository"
    username = ENV["TALEND_GIT_USER"] ?: "tisadmin"
    password = ENV["TALEND_GIT_PASSWORD"] ?: "secretpassword"
    commit.log.pattern = "{0}"

    whiteListBranches = true
  }

  libraries {
    type = "nexus" // default for version > 6.X

    nexus {
      url = "$tac.repository.nexus.url"
      username = "talend-custom-libs-admin"
      password = "talend-custom-libs-admin"

      repository_snapshots = "talend-custom-libs-snapshot"
      repository_releases = "talend-custom-libs-release"
    }

    //!!! IMPORTANT: SVN support has been deprecated in version 6.3.1
    //               SVN support expected to be removed in future versions
    svn {
      repository = "talendlibrary"

      url = "http://$tac.svn.host:$tac.svn.port/$tac.svn.root/$repository"
      username = "tisadmin"
      password = "secretpassword"
    }
  }

  login {
    login_page {
      enable.force.logout = true
    }

    sso {
      use_sso = false

      sp_entity_id = "/ssologin"

      ip_product = "Okta" // Or "SiteMinder"

      okta {
        organization_url = "https://{organization}.okta.com"
        embedLink = ""
      }

      siteminder {
        service_url = ""
      }

      roles {
        tac {
          administrator = ""
          viewer = ""
          operation_manager = ""
          designer = ""
        }

        dataprep {
          administrator = ""
          data_preparator = ""
          dataset_manager = ""
        }

        tds {
          data_steward = ""
          campaign_owner = ""
        }
      }
    }
  }
}

jobserver {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = ENV["TALEND_JOBSERVER_FQDN"] ?: ""

  ports {
    command = 8000
    file = 8001
    monitoring = 8888
  }

  // Name of the current jobserver  value used for the installation directory (see folders.home below)
  // If multiple jobserver  are required on the same host, make multiple installation with a different name
  name = "jobserver"

  folders {
    home = "${INSTALL_TALEND_FOLDER}/${jobserver.name}"
    data = "$INSTALL_DATA_FOLDER/${jobserver.name}/TalendJobServersFiles"
  }

  max_connection = 1000

  service {
    name = "talend-${jobserver.name}-6.3.1"
    display = "Talend Job Server 6.3.1"
    description = "Enables execution of Talend jobs on this server. Talend Remote Job Server is used by tac for running remote jobs."

    config = HOSTS.services
  }

  cleaning {
    frequency = 600 // In sec
    logs {
      retention = 90   // In Days
      max = 1000       // Total logs file to keep before cleaning
    }
    jobs {
      retention = 90   // In Days
      max = 200        // Total jobs to keep before cleaning
    }
    libs {
      retention = 90   // In Days
      max = 300        // Total jobs to keep before cleaning
    }
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/${jobserver.name}/logging"
      path = "$folder/jobserver.log"
    }

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      // port = 8055
      port = ENV["TALEND_LOGSTASH_JOBSERVER_PORT"] ?: 8055
    }
  }

  tac_registration {
    register = true

    // tac references 'tac' configuration above.
    // It used to retrieve the host . port user and password to connect to it
    tac = tac

    // Allows TUI to wait and retry to register the JobServer if TAC is not available right away
    tentatives {
      number = 5          // How many times TUI will try. 0 means failed after the first try.
      wait_time = 2000   // ms. Wait time between each tentative.
    }

    // !! IMPORTANT: If Blank, The value will be the concatenation of the hostname and the constant '_jobserver'
    label = ENV["TALEND_JOBSERVER_LABEL"] ?: ""
    // !! IMPORTANT: If value is blank, the value will be the timezone of the machine where the installer runs.
    timezone = ""

    virtual_servers {
      // 'add_to' is the label of the virtual server to add the current server
      // !! IMPORTANT: If the virtual server doesn't exist it will be created.
      add_to = "VirtualServer_1"
    }
  }
}

// Talend Repository Manager
trm {
  dependencies = []

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "admin"
    }

    instance {
      name = "trm"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.build?.host}"
      port = 8790
      port_ajp = 8509


      webapp {
        name = "org.talend.repositorymanager"
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      service {
        name = "talend-${instance.name}-6.3.1"
        display = "Talend Repository Manager 6.3.1"
        description = "Talend Repository Manager is a web-based application delivered with one default account. This account enables you to manage the creation, deletion and edition of all Talend Repository Manager users as well as monitor and manage licenses. Access trm console through http://${TRM.app_server.instance.host}:${TRM.app_server.instance.port}/${TRM.app_server.instance.webapp.name}"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8445
        // Info: If enforce is true, all http requests will be redirected to the ssl port automatically
        enforce = true

        keystore {
          // Default value: instance host
          alias = "${TRM.app_server.instance.host}"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${TRM.app_server.instance.name}/conf/${TRM.app_server.instance.name}_sslkeystore"

          // keystore password
          store.password = "jks_pwd"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Distinguish name: Update accordingly
          dname = "CN=${TRM.app_server.instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"
        }
      }
    }
  }

  database {
    config.password = "admin"
    // Databases supported out of the box : "h2", "mariadb", "mysql",  "oracle" and "sqlserver"
    type = "mysql"

    h2 {
      dependencies = []

      schema = "repository_manager"

      username = "tisadmin"
      password = "tisadmin"
      db = "repository_manager"

      url = "jdbc:h2:{0}/WEB-INF/database/$schema;AUTO_SERVER=TRUE;MVCC=TRUE;lock_timeout=15000"
      driver = ""
    }

    mariadb {
      dependencies = [
          "database.driver.mariadb"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      schema = "repository_manager"

      host = "localhost"
      port = 3306
      username = "admin"
      password = "admin"

      connect_timeout = "5"

      url = "jdbc:mariadb://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "org.mariadb.jdbc.Driver"

      url = "jdbc:mariadb://$host:$port/$schema"
      driver = "org.mariadb.jdbc.Driver"
    }

    mysql {
      dependencies = [
          "database.driver.mysql"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      schema = "repository_manager"

      host = "localhost"
      port = 3306
      username = "admin"
      password = "admin"

      connect_timeout = "5"

      // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
      url = "jdbc:mysql://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "com.mysql.jdbc.Driver"
    }

    oracle {
      //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
      dependencies = [
          "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
//          "database.driver.Oracle"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      service_name = "repository_manager"

      host = "localhost"
      port = 1521
      username = "admin"
      password = "admin"

      connect_timeout = 5

      url = "jdbc:oracle:thin:@$host:$port:$service_name"
      // Long format
      // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"

      driver = "oracle.jdbc.driver.OracleDriver"
    }

    sqlserver {
      dependencies = [
          "database.driver.sqlserver"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      schema = "repository_manager"

      host = "localhost"
      port = 1433
      username = "sa"
      password = "sa"

      connect_timeout = 5

//      url = "jdbc:jtds:sqlserver://$host:$port/$schema"
      url = "jdbc:jtds:sqlserver://${host}:${port}/${schema};loginTimeout=${connect_timeout}"

      driver = "net.sourceforge.jtds.jdbc.Driver"
    }
  }

  default_account {
    login = "admin@company.com"
    password = "admin"
    firstname = "admin"
    lastname = "admin"
  }

  local.extract.path = "$INSTALL_DATA_FOLDER/trm/extract"
}

logserver {

  elasticsearch {
    // !! IMPORTANT: If the 'host' value is blank, the current server hostname or IP address will be used.
    // network.host = "${HOSTS.logging?.host}"
    // http.port = 9200
    // cluster.name = "talend-log-central"
    // path.data = "$INSTALL_DATA_FOLDER/logserver/elasticsearch/data"
    // path.logs = "$INSTALL_DATA_FOLDER/logserver/elasticsearch/logs"

    network.host = "${HOSTS.logging?.host}"
    http.port = ENV["TALEND_LOGSTASH_ELASTIC_SEARCH_PORT"] ?: 9200
    cluster.name = "talend-log-central"
    path.data = "$INSTALL_DATA_FOLDER/logserver/elasticsearch/data"
    path.logs = "$INSTALL_DATA_FOLDER/logserver/elasticsearch/logs"
  }

  logstach {
    path.logs = "$INSTALL_DATA_FOLDER/logserver/logstash/logs"
    input {
      ports {
        tac = tac.logging.logstach.port
        components = 8052
        mdm_server = 8053
        mdm_match = 8054
        jobserver = jobserver.logging.logstach.port
        commandine = cmdline.logging.logstach.port
      }
    }
    output {
      elasticsearch {
        host = logserver.elasticsearch.network.host
        port = logserver.elasticsearch.http.port
      }
    }
  }

  kibana {
    server.host = "0.0.0.0"
    // server.port = tac.monitoring.kibana.port
    server.port = ENV["TALEND_LOGSTASH_KIBANA_PORT"] ?: tac.monitoring.kibana.port ?: 5601
    es.url = "http://${logserver.elasticsearch.network.host}:${logserver.elasticsearch.http.port}"

    path.logs = "$INSTALL_DATA_FOLDER/logserver/kibana/logs"
    logging.dest = "$path.logs/kibana.log" // Or 'stdout' for console output
  }

  // !Not recommended yet as elasticsearch does not support to be started as root
  auto_start = false

  service {
    name = "talend-logserver-6.3.1"
    display = "Talend logserver 6.3.1"
    description = "Talend logserver 6.3.1"

    config = HOSTS.services
  }

}

// Talend Continuous Integration Builder
tcib {
  // Available values (see dependencies.conf):
  dependencies = [
      "ci.maven",  // !!! MUST be listed before "ci.jenkins"
      "ci.groovy",
      "ci.jenkins"
  ]

  // !! Use only if Jenkins dependency is installed
  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    auto_config = true

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "admin"
    }

    instance {
      name = "jenkins"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.ci?.host}"
      port = 8095
      port_ajp = 8609

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"
      webapp {
        name = "jenkins"
      }

      service {
        name = "${instance.name}"
        display = "Jenkins Server used by Talend CI"
        description = "Jenkins Server used by Talend CI"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8443
        // Info: If enforce is true, all http requests will be redirected to the ssl port automatically
        enforce = true

        keystore {
          // Default value: instance host
          alias = "${TCIB.app_server.instance.host}"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${TCIB.app_server.instance.name}/conf/${TCIB.app_server.instance.name}_sslkeystore"

          // keystore password
          store.password = "jks_pwd"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Distinguish name: Update accordingly
          dname = "CN=${TCIB.app_server.instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"
        }
      }

    }
  }
}

//-------------------------------------------------
//-------------------------------------------------
//-------------   DATA QUALITY  -------------------
//-------------------------------------------------
//-------------------------------------------------
kafka {
  host = "${HOSTS.dq?.host}"
  port = 9092

  folders {
    home = "$INSTALL_DEPENDENCIES_FOLDER/kafka"
    log = "$INSTALL_DATA_FOLDER/kafka/logs"
  }

  zookeeper {
    host = "${HOSTS.dq?.host}"
    port = 2181

    folders {
      data = "$INSTALL_DATA_FOLDER/zookeper/data"
    }
  }

  service {
    name = "talend-kafka-6.3.1"
    display = "Apache Kafka & Zookeeper services"
    description = "talend: Apache Kafka & Zookeeper service"

    config = HOSTS.services
  }
}

// Talend Data Stewardship
tds {
  // Available values (see dependencies.conf):
  dependencies = [
      "database.server.mongodb", // Remove line if use an external MongoDB Server. See 'database' section below to set connection info.
      "dms.kafka" // !!Mandatory: dms: distributed messaging system
  ]

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "admin"
    }

    instance {
      name = "tds"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.dq?.host}"
      port = 19999
      port_ajp = 19928
      port_shutdown = 19924

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"
      webapp {
        name = "tds"
        url = "http://${instance.host}:${instance.port}/"
      }

      service {
        name = "talend-${instance.name}-6.3.1"
        display = "Talend Data Stewardship"
        description = "Talend Data Stewardship"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8443
        // Info: If enforce is true, all http requests will be redirected to the ssl port automatically
        enforce = true

        keystore {
          // Default value: instance host
          alias = "${tds.app_server.instance.host}"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${tds.app_server.instance.name}/conf/${tds.app_server.instance.name}_sslkeystore"

          // keystore password
          store.password = "jks_pwd"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Distinguish name: Update accordingly
          dname = "CN=${tds.app_server.instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"
        }
      }
    }
  }

  database {
    mongodb = HOSTS.dq.mongodb

    database = 'tds'

    username = 'tds-user'
    // Default password: 'tuser'
    password = 'tuser'
  }

  security{
    // Authentication and Authorisation
    // tac references 'tac' configuration above.
    // It used to retrieve the host . port user and password to connect to it
    tac = tac
  }

  folders {
    home = "${INSTALL_TALEND_FOLDER}/${tds.app_server.instance.name}"
    app = "${home}/app"
    config = "${INSTALL_TALEND_FOLDER}/${tds.app_server.instance.name}/conf"
    context = "${config}/Catalina/localhost"
    logs = "$INSTALL_DATA_FOLDER/${tds.app_server.instance.name}/logs"
    data_tds = "$INSTALL_DATA_FOLDER/${tds.app_server.instance.name}/data/tds"
    data_schema = "$INSTALL_DATA_FOLDER/${tds.app_server.instance.name}/data/schema"
  }

  // Distributed Messaging System
  dms = kafka
}

// Talend Dictionary Service
dqdict {
  // Available values (see dependencies.conf):
  dependencies = [
      "database.server.mongodb",  // Remove line if use an external MongoDB Server. See 'database' section below to set connection info.
      "dms.kafka" // !!Mandatory: dms: distributed messaging system
  ]

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "admin"
    }

    instance {
      name = "dq_dict"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.dq?.host}"
      port = 8187
      port_ajp = 8116

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"
      webapp {
        name = "dqdict"
        url = "http://${instance.host}:${instance.port}/"
      }

      service {
        name = "talend-${instance.name}-6.3.1"
        display = "Talend DQ Dictionary"
        description = "Talend Data Quality Dictionary Service"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8443
        // Info: If enforce is true, all http requests will be redirected to the ssl port automatically
        enforce = true

        keystore {
          // Default value: instance host
          alias = "${dqdict.app_server.instance.host}"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${dqdict.app_server.instance.name}/conf/${dqdict.app_server.instance.name}_sslkeystore"

          // keystore password
          store.password = "kRABVl1MBMoR55Ua6y1T6g==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Distinguish name: Update accordingly
          dname = "CN=${dqdict.app_server.instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"
        }
      }
    }
  }

  // MongoDB database
  database {
    mongodb = HOSTS.dq.mongodb

    database = 'dqdict'

    username = 'dqdict-user'
    // Default password: 'duser'
    password = 'duser'
  }

  security{
    // Authentication and Authorisation
    // tac references 'tac' configuration above.
    // It used to retrieve the host . port user and password to connect to it
    tac = tac
  }

  folders {
    home = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}"
    app = "${home}/app"
    config = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}/conf"
    context = "${config}/Catalina/localhost"

    root_cmdline = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}_cmdline"

    root_database = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}_database"

    logs = "$INSTALL_DATA_FOLDER/${dqdict.app_server.instance.name}/logs"
    lucene = "$INSTALL_DATA_FOLDER/${dqdict.app_server.instance.name}/lucene"
  }

  // Distributed Messaging System
  dms = kafka
}

dataprep {
  // Available values (see dependencies.conf):
  dependencies = [
      "database.server.mongodb",  // Remove line if use an external MongoDB Server. See 'database' section below to set connection info.
      "dms.kafka" // !!Mandatory: dms: distributed messaging system
  ]

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "admin"
    }

    instance {
      name = "dataprep"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.dq?.host}"
      port = 19999
      port_ajp = 8116

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"
      webapp {
        name = "dqdict"
        url = "http://${instance.host}:${instance.port}/"
      }

      service {
        name = "talend-${instance.name}-6.3.1"
        display = "Talend DQ Dictionary"
        description = "Talend Data Quality Dictionary Service"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8443
        // Info: If enforce is true, all http requests will be redirected to the ssl port automatically
        enforce = true

        keystore {
          // Default value: instance host
          alias = "${dqdict.app_server.instance.host}"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${dqdict.app_server.instance.name}/conf/${dqdict.app_server.instance.name}_sslkeystore"

          // keystore password
          store.password = "kRABVl1MBMoR55Ua6y1T6g==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Distinguish name: Update accordingly
          dname = "CN=${dqdict.app_server.instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"
        }
      }
    }
  }

  // MongoDB database
  database {
    mongodb = HOSTS.dq.mongodb

    database = 'dataprep'

    username = 'dataprep-user'
    // Default password: 'dprep'
    password = 'dprep'
  }

  security{
    // Authentication and Authorisation
    // tac references 'tac' configuration above.
    // It used to retrieve the host . port user and password to connect to it
    tac= tac
  }

  // Distributed Messaging System
  dms = kafka
}

tcomp {

}

flowrunner {

}

sparkjs {

}